/// <reference types="wonder-commonlib" />
import { Map } from "immutable";
import { GameObject } from "wonder.js/dist/es2015/core/entityObject/gameObject/GameObject";
import { Main } from "wonder.js/dist/es2015/core/Main";
import { DomQuery as DomQueryCommonLib } from "wonder-commonlib/dist/es2015/utils/DomQuery";
import { CameraController } from "wonder.js/dist/es2015/component/camera/CameraController";
import { Geometry } from "wonder.js/dist/es2015/component/geometry/Geometry";
import { Material } from "wonder.js/dist/es2015/component/material/Material";
import { BasicMaterial } from "wonder.js/dist/es2015/component/material/BasicMaterial";
import { Color } from "wonder.js/dist/es2015/structure/Color";
import { MeshRenderer } from "wonder.js/dist/es2015/component/renderer/MeshRenderer";
import { ThreeDTransform } from "wonder.js/dist/es2015/component/transform/ThreeDTransform";
export declare const removeAllChildrenAdaptor: (gameObject: GameObject) => void;
export declare const getSceneAdaptor: () => any;
export declare const getChildrenAdaptor: (gameObject: GameObject) => any;
export declare const getComponentAdaptor: (gameObject: GameObject, _class: any) => any;
export declare const hasComponentAdaptor: (gameObject: GameObject, _class: any) => any;
export declare const getTransformComponentAdaptor: (gameObject: GameObject) => any;
export declare const getCameraControllerAdaptor: () => typeof CameraController;
export declare const getMeshRendererAdaptor: () => typeof MeshRenderer;
export declare const getMaterialAdaptor: () => typeof Material;
export declare const getBasicMaterialAdaptor: () => typeof BasicMaterial;
export declare const getGeometryAdaptor: () => typeof Geometry;
export declare const getMainAdaptor: () => typeof Main;
export declare const getColorAdaptor: () => typeof Color;
export declare const getDataBufferConfigAdaptor: () => {
    transformDataBufferCount: number;
    geometryDataBufferCount: number;
    basicMaterialDataBufferCount: number;
    lightMaterialDataBufferCount: number;
    textureDataBufferCount: number;
    ambientLightDataBufferCount: number;
    directionLightDataBufferCount: number;
    pointLightDataBufferCount: number;
    frontAmbientLightCount: number;
    frontDirectionLightCount: number;
    frontPointLightCount: number;
    deferAmbientLightCount: number;
    deferDirectionLightCount: number;
    deferPointLightCount: number;
    renderCommandBufferCount: number;
    geometryIndicesBufferBits: number;
};
export declare const getBasicMaterialColorAdaptor: Function;
export declare const setWebGLVersionAdaptor: (version: "webgl2" | "webgl1") => void;
export declare const setGPUDetectDataAdaptor: (extensionName: string, value: any) => void;
export declare const initDataAdaptor: any;
export declare const getGLAdaptor: () => any;
export declare const setGLAdaptor: (gl: any) => void;
export declare const createStateAdapator: () => Map<{}, {}>;
export declare const setStateAdaptor: (state: Map<any, any>) => void;
export declare const getDomQueryAdaptor: () => typeof DomQueryCommonLib;
export declare const clearInstance: () => void;
export declare const getNearAdaptor: (cameraController: CameraController) => any;
export declare const getFarAdaptor: (cameraController: CameraController) => any;
export declare const getAspectAdaptor: (cameraController: CameraController) => any;
export declare const getFovyAdaptor: (cameraController: CameraController) => any;
export declare const isDirectorInit: () => boolean;
export declare const getPositionAdaptor: (transform: ThreeDTransform) => any;
